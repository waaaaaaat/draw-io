# ChatGPT Prompt Engineering for Developers



Principles:
1. Write clear and specific instructions
---- Use delimiters (""", ''', ---, <>, <tag>)
---- Ask for structured output (html, json...)
---- Check conditions
---- Give successful examples
2. Give the model time to think
---- Specify the steps to complete a task
---- Instruct the model to work out its own solution before rushing to a conclusion
####
Iterative prompt development
 ==> Idea ==> Impl(code/data) ==> Experimental result ==> Error analysis
~~~~  Prompt guidelines, Analyze, Refine, Repeat the cycle
####
Capabilities：
---- Summarizing: length limit / topic focus / extract info / workflow (aggregate)
---- Inferring: extracting label(name, etc) / sentiment / structured output (JSON with multi-info) / extract topics from large text / topics cover detect / +舆情
---- Transforming: translating(translate / recognise / forms<formal, bussiness, English pirate>  ) / grammar correction / format (json to html, etc) / proofread
---- Expanding: expand (write email according the customer's review sentiment, essay, +情绪训练), temperature
####
Building a chatbot
-- Order taker for restaurant
-- chat-context: message list
-- task / collect info / condition / menu ...


-------- Lectures 

1、Introduction

`Base LLM`: Predicts next word, based on text training data

`Instruction Tuned LLM`: Tries to follow instructions

2、Guidelines for Prompting

-- Two Principles

-- Model Limitations: 

Reducing Hallucinations:

Find relevant information / quotes, then use those quotes to answer

3、Interative Prompt Development

4、Summarizing

5、




------------------------------
# Copilot 补全 vs 注释
------------------------------
            |注释|补全|
-----------------------
使用场景    |1. 复杂的功能函数，需要注释来解释思路、步骤，顺便让AI根据注释完成代码。|1. 思路清晰流畅，按照自己的思路写代码时，AI减少打字|
            |2. 不太熟悉的API使用时，需要AI直接生成。|2. 写注释的时候，AI自动根据上下文补全，减少输入|
            |3. 繁琐输入简单内容的时候，例如json, sql, pojo等。|3. 方法名或者变量名起得很好，AI很容易理解的时候，直接出来大段补全|
            |4. 临时需要使用一门不太熟练的语言写代码的时候。|4. 上下文存在相似内容，AI根据例子能够很好地补全|
            |5. 非常通用的工具函数，例如读取并解析配置文件等。|5. 根据注释生成不理想的时候，适当的人为输入引导它补全|
-----------------------
主要优势    |非常高效，能够生成大量的内容。一些情况下甚至可以直接完成整个功能|过程可控，可靠性高|
-----------------------
不完美的点  |1. 生成的内容过大时，有可能隐含不易发现的缺陷。|1. 相对来说效率低一些，类似于一种比IDE聪明百倍的补全功能|
            |2. 有时生成不理想，则需要花更多的精力去调整注释，也是工作量。|2. 补全不恰当时可能打断思维|
-----------------------
总结：Copilot被Github定义为AI pair programmer，注释方式下AI主写，人观察提示；补全模式下人主写，AI观察提示。建议在不同的场景下采用适合的模式来完成工作。同时要注意不能为了用而用，反复调整注释观察它生成，最终花费的时间可能更多。另外一方面，根据同事的经验，使用ChatGPT比注释方式更加高效、更加灵活可调。

